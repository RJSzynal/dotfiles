#!/bin/bash
# Bash wrappers for docker run commands

export JESSFRAZ_DOCKER_REPO_PREFIX=jess
export MY_DOCKER_REPO_PREFIX=rjszynal

#
# Helper Functions
#
docker_args(){
	local display_ip=
	local audio_ip=
	common_docker_args=(
		-v /etc/localtime:/etc/localtime:ro
	)
	case ${network} in
		none) ;;
		host)
			display_ip="127.0.0.1"
			audio_ip="127.0.0.1"
			;;
		bridge)
			if [[ "${extra_networks[@]}" != "" ]]; then
				relies_on_networks ${extra_networks[@]};
			fi
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
			audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
			common_docker_args+=(
				--hostname ${container_name}
			)
			;;
		secure)
			relies_on pia-vpn
			network="container:pia-vpn"
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)
			audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)
			;;
		torproxy)
			relies_on torproxy
			network="container:torproxy"
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)
			audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)
			;;
		*)
			relies_on_networks ${network} ${extra_networks[@]}
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
			audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
			common_docker_args+=(
				--hostname ${container_name}
			)
			;;
	esac

	common_docker_args+=(
		--network ${network}
	)
	video_docker_args=(
		-e DISPLAY="${display_ip}${DISPLAY}"
		-e GDK_SCALE
		-e GDK_DPI_SCALE
		-e QT_DEVICE_PIXEL_RATIO
		-v "${HOME}/.gtkrc:/root/.gtkrc:ro"
		--group-add video
	)
	audio_docker_args=(
		-e PULSE_SERVER=${audio_ip}
		--group-add audio
	)
}
docker_run_daemon(){
	docker_args
	del_stopped ${container_name} true

	docker create \
		${common_docker_args[@]} \
		${extra_docker_args[@]} \
		--name ${container_name} \
		${image_name} \
		${application_args[@]}

	for net in "${extra_networks[@]}"; do
		docker network connect ${net} ${container_name}
	done

	docker start ${container_name}

	local format="{{.NetworkSettings.Networks.${network}.IPAddress}}"
	container_ip=$(docker inspect --format ${format} ${container_name})
}
docker_run_gui(){
	docker_args
	del_stopped ${container_name} true

	docker create --rm \
		${common_docker_args[@]} \
		${video_docker_args[@]} \
		${audio_docker_args[@]} \
		${extra_docker_args[@]} \
		--name ${container_name} \
		${image_name} \
		${application_args[@]}

	for net in "${extra_networks[@]}"; do
		docker network connect ${net} ${container_name}
	done

	docker start ${container_name}
}
docker_run_tty(){
	docker_args
	del_stopped ${container_name} true

	docker create --rm -it \
		${common_docker_args[@]} \
		${extra_docker_args[@]} \
		--name ${container_name} \
		${image_name} \
		${application_args[@]}

	for net in "${extra_networks[@]}"; do
		docker network connect ${net} ${container_name}
	done

	docker start -i ${container_name}
}
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local force=${2:-false}
	local state
	state=$(docker inspect --format "{{.State.Running}}" "${name}" 2>/dev/null)

	if [[ "${state}" == "false" ]]; then
		docker rm "${name}"
	elif [[ "${force}" == "true" ]]; then
		docker rm -f "${name}"
	fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "${container}" 2>/dev/null)

		if [[ "${state}" == "false" ]] || [[ "${state}" == "" ]]; then
			echo "${container} is not running, starting it for you."
			${container}
		fi
	done
}
relies_on_networks(){
	for network in "$@"; do
		docker network create "${network}" 2>/dev/null || true
		# If the network has already been added to xhost this boot then skip adding
		if [[ -f "/tmp/${network}.network.relies_on" ]]; then return 0; fi
		local subnet=$(docker network inspect --format='{{range .IPAM.Config}}{{.Subnet}}{{end}}' ${network})
		local ips=()
		case ${subnet#*/} in
			24|16)
				for (( i=0; i<=255; i++ )); do
					local ip=${subnet%.*/*}.${i}
					if [[ "${ip}" != "${subnet%.*/*}.0" && "${ip}" != "${subnet%.*/*}.1" ]]; then
						ips+=("+${ip}")
					fi
					unset ip
				done
				;;
			16)
				for (( i=0; i<=255; i++ )); do
					for (( j=0; j<=255; j++ )); do
						local ip=${subnet%.*.*/*}.${i}.${j}
						if [[ "${ip}" != "${subnet%.*/*}.0" && "${ip}" != "${subnet%.*/*}.1" ]]; then
							ips+=("+${ip}")
						fi
						unset ip
					done
				done
				;;
			8)
				for (( i=0; i<=255; i++ )); do
					for (( j=0; j<=255; j++ )); do
						for (( k=0; k<=255; k++ )); do
							local ip=${subnet%.*.*.*/*}.${i}.${j}.${k}
							if [[ "${ip}" != "${subnet%.*/*}.0" && "${ip}" != "${subnet%.*/*}.1" ]]; then
								ips+=("+${ip}")
							fi
							unset ip
						done
					done
				done
				;;
			*)
				echo "Unsupported netmask ${subnet#*/}. Only 8, 16, and 24 are supported."
				;;
		esac
		unset subnet
		echo ${ips[@]} | xargs -n 1 -P 65534 xhost
		unset ips
		touch /tmp/${network}.network.relies_on
	done
}
# creates an nginx config for a local route
nginx_config(){
	server=$1
	route=$2

	cat >"${HOME}/.nginx/conf.d/${server}.conf" <<-EOF
	upstream ${server} { server ${route}; }
	server {
	server_name ${server};

	location / {
	proxy_pass  http://${server};
	proxy_http_version 1.1;
	proxy_set_header Upgrade \$http_upgrade;
	proxy_set_header Connection "upgrade";
	proxy_set_header Host \$http_host;
	proxy_set_header X-Forwarded-Proto \$scheme;
	proxy_set_header X-Forwarded-For \$remote_addr;
	proxy_set_header X-Forwarded-Port \$server_port;
	proxy_set_header X-Request-Start \$msec;
}
	}
	EOF

	# restart nginx
	docker restart nginx

	# add host to /etc/hosts
	hostess add "$server" 127.0.0.1

	# open browser
	browser-exec "http://${server}"
}

#
# Container Aliases
#
alias apt-file="apt_file"
apt_file(){
	local container_name="apt-file"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/apt-file"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=()
	local application_args=(
		apt-file
		"$@"
	)

	docker_run_tty
}
audacity(){
	local container_name="audacity"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/audacity"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=()
	local application_args=(
		"$@"
	)

	docker_run_gui
}
aws(){
	local container_name="aws"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/awscli"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.aws:/root/.aws"
		-e AWS_DEFAULT_REGION
		-e AMAZON_ACCESS_KEY_ID
		-e AMAZON_SECRET_ACCESS_KEY
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
az(){
	local container_name="az"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/azure-cli"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.azure:/root/.azure"
		--log-driver none
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
bees(){
	local container_name="bees"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/beeswithmachineguns"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-e NOTARY_TOKEN
		-v "${HOME}/.bees:/root/.bees"
		-v "${HOME}/.boto:/root/.boto"
		-v "${HOME}/.dev:/root/.ssh:ro"
		--log-driver none
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
alias browser-exec=browser_exec
browser_exec(){
	xdg-open ${@}
}
cadvisor(){
	local container_name="cadvisor"
	local image_name="google/cadvisor"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--restart always
		-v /:/rootfs:ro
		-v /var/run:/var/run:rw
		-v /sys:/sys:ro
		-v /var/lib/docker/:/var/lib/docker:ro
	)
	local application_args=(
		"$@"
	)

	docker_run_daemon
	hostess add ${container_name} ${container_ip}
	browser-exec "http://${container_name}:8080"
}
cheese(){
	local container_name="cheese"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/cheese"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/Pictures:/root/Pictures"
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
chrome(){
	local run_type=
	if [[ "$1" == "secure" ]] || [[ "$1" == "tor" ]]; then
		run_type="$1"
		shift
	fi
	local container_name="chrome"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/chrome"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--cpuset-cpus 0
		--memory 3gb
		--shm-size=2g
		--device /dev/dri
		--device /dev/usb
		--device /dev/bus/usb
		-e HOME=/home/chrome
		-v "/etc/hosts:/etc/hosts:ro"
		--security-opt seccomp:${HOME}/seccomp/chrome.json
	)
	local application_args=(
		--user-data-dir="/home/chrome/.config/google-chrome"
	)

	case "${run_type}" in
		secure)
			container_name="${container_name}-secure"
			network="secure"

			extra_docker_args+=(
				--tmpfs "/home/chrome/.cache"
				--tmpfs "/home/chrome/.config"
				--tmpfs "/home/chrome/.pki"
				--tmpfs "/home/chrome/.local"
				--tmpfs "/home/chrome/.gnome"
			)
			application_args+=(
				--incognito
				--no-first-run
				--no-default-browser-check
			)

			if [[ "$@" == "" ]]; then
				application_args+=(
					https://www.privateinternetaccess.com/
				)
			fi
			;;
		tor)
			relies_on torproxy
			container_name="${container_name}-tor"
			network="untrusted"

			extra_docker_args+=(
				--tmpfs "/home/chrome/.cache"
				--tmpfs "/home/chrome/.config"
				--tmpfs "/home/chrome/.pki"
				--tmpfs "/home/chrome/.local"
				--tmpfs "/home/chrome/.gnome"
			)
			application_args+=(
				--incognito
				--no-first-run
				--no-default-browser-check
				--proxy-server="socks5://torproxy:9050"
				--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE torproxy"
			)

			if [[ "$@" == "" ]]; then
				application_args+=(
					https://check.torproject.org/api/ip
				)
			fi
			;;
		*)
			extra_docker_args+=(
				-u $(id -u):$(id -g) \
				-v ${HOME}/.chrome/cache:/home/chrome/.cache
				-v ${HOME}/.chrome/config:/home/chrome/.config
				-v ${HOME}/.chrome/pki:/home/chrome/.pki
				-v ${HOME}/.chrome/local:/home/chrome/.local
				-v ${HOME}/.chrome/gnome:/home/chrome/.gnome
				-v ${HOME}/Downloads:/home/chrome/Downloads
				-v ${HOME}/Pictures:/home/chrome/Pictures
				-v ${HOME}/Torrents:/home/chrome/Torrents
			)
			;;
	esac
	local args_hash=$(sha1sum <<<"${*}" | cut -c1-40)
	container_name="${container_name}-${args_hash}"
	unset args
	application_args+=(
		"$@"
	)

	if [ ! -f ${HOME}/seccomp/chrome.json ]; then
		mkdir -p ${HOME}/seccomp
		wget https://raw.githubusercontent.com/jfrazelle/dotfiles/master/etc/docker/seccomp/chrome.json -O ${HOME}/seccomp/chrome.json
	fi

	docker_run_gui
}
consul(){
	local container_name="consul"
	local image_name="consul"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local encrypt_key="$(docker run --rm ${image_name} keygen)"
	local extra_docker_args=(
		-v "${HOME}/.consul:/consul/config"
		-v /var/run/docker.sock:/var/run/docker.sock:ro
		-e GOMAXPROCS=2
		--restart always
	)
	local application_args=(
		agent
		-bootstrap-expect 1
		-encrypt "${encrypt_key}"
		-ui
		-server
		-datacenter szynal
		-bind 0.0.0.0
		-client 0.0.0.0
		"$@"
	)
	# check if we passed args and if consul is running
	local state=$(docker inspect --format "{{.State.Running}}" ${container_name} 2>/dev/null)
	if [[ "${state}" == "true" ]] && [[ "$*" != "" ]]; then
		docker exec -it ${container_name} consul "$@"
		return 0
	fi

	docker_run_daemon
	hostess add ${container_name} ${container_ip}
	browser-exec "http://${container_name}:8500"
}
dcos(){
	local container_name="dcos"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/dcos-cli"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.dcos:/root/.dcos"
		-v "$(pwd):/root/apps"
		-w /root/apps
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
firefox(){
	relies_on pulseaudio
	local run_type=
	if [[ "$1" == "secure" ]]; then
		run_type="$1"
		shift
	fi

	local extra_firefox_args=( ${@} )
	local extra_docker_args=()
	local name_suffix=
	local args_hash=$(sha1sum <<<"${*}" | cut -c1-40)
	local display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})

	local network="trusted"
	local extra_networks=()
	case "${run_type}" in
		secure)
			relies_on pia-vpn
			name_suffix="-secure"
			network="container:pia-vpn"
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)

			extra_docker_args+=(
				--tmpfs "/home/firefox/.cache"
				--tmpfs "/home/firefox/.mozilla"
			)
			extra_firefox_args+=(
				-silent
				-private
				-private-window https://www.privateinternetaccess.com/
			)
			;;
		*)
			relies_on_networks ${network}
			extra_docker_args+=(
				-v ${HOME}/.firefox/cache:/home/firefox/.cache/mozilla
				-v ${HOME}/.firefox/mozilla:/home/firefox/.mozilla
				-v ${HOME}/Downloads:/home/firefox/Downloads
				-v ${HOME}/Pictures:/home/firefox/Pictures
				-v ${HOME}/Torrents:/home/firefox/Torrents
			)
			extra_firefox_args+=(
				-new-window
			)
			;;
	esac

	del_stopped firefox${name_suffix}-${args_hash}

	docker run --rm -d \
		--network ${network} \
		--memory 4gb \
		--shm-size=2g \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY="${display_ip}${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-e PULSE_SERVER="pulseaudio" \
		${extra_docker_args[@]} \
		--name firefox${name_suffix}-${args_hash} \
		${MY_DOCKER_REPO_PREFIX}/firefox \
			-new-instance \
			${extra_firefox_args[@]}
}
fleetctl(){
	local container_name="fleet"
	local image_name="r.j3ss.co/fleet"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--entrypoint fleetctl
		-v "${HOME}/.fleet://.fleet"
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
gcalcli(){
	local container_name="gcalcli"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/gcalcli"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.gcalcli/home:/home/gcalcli/home"
		-v "${HOME}/.gcalcli/work/oauth:/home/gcalcli/.gcalcli_oauth"
		-v "${HOME}/.gcalcli/work/gcalclirc:/home/gcalcli/.gcalclirc"
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
dgcloud(){
	local container_name="gcloud"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/gcloud"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.gcloud:/root/.config/gcloud"
		-v "${HOME}/.ssh:/root/.ssh:ro"
		-v "$(command -v docker):/usr/bin/docker"
		-v /var/run/docker.sock:/var/run/docker.sock
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
gimp(){
	local container_name="gimp"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/gimp"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/Pictures:/root/Pictures"
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
gitsome(){
	local container_name="gitsome"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/gitsome"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.gitsomeconfig:/home/anon/.gitsomeconfig"
		-v "${HOME}/.gitsomeconfigurl:/home/anon/.gitsomeconfigurl"
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
hollywood(){
	local container_name="hollywood"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/hollywood"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=()
	local application_args=(
		"$@"
	)

	docker_run_tty
}
htop(){
	local container_name="htop"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/htop"
	local network="none"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--pid host
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
htpasswd(){
	local container_name="htpasswd"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/htpasswd"
	local network="none"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--log-driver none
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
alias http=httpie
httpie(){
	local container_name="httpie"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/httpie"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v /var/run/docker.sock:/var/run/docker.sock
		--log-driver none
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
imagemin(){
	local image_path=$(realpath "$1")
	local directory=$(dirname "${image_path}")
	local image_name=$(basename "${image_path}")
	local extension="${image_name##*.}"
	local filename="${image_name%.*}"
	local container_name="imagemin"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/imagemin"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${directory}:/root/Pictures"
	)
	local application_args=(
		sh -c "imagemin /root/Pictures/${image_name} > /root/Pictures/${filename}_min.${extension}"
	)

	docker_run_tty
}
irssi() {
	local container_name="irssi"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/irssi"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.irssi:/home/user/.irssi"
		--read-only
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
john(){
	local file=$(realpath "$1")
	local container_name="john"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/john"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${file}:/root/$(basename "${file}")"
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
alias build_kernel=kernel_builder
kernel_builder(){
	local container_name="kernel-builder"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/kernel-builder"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v '/usr/src:/usr/src'
		-v '/lib/modules:/lib/modules'
		-v '/boot:/boot'
		--entrypoint 'build_kernel'
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
keepassxc(){
	local container_name="keepassxc"
	local image_name="${MY_DOCKER_REPO_PREFIX}/keepassxc"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v '/usr/share/X11/xkb:/usr/share/X11/xkb:ro'
		-v '/etc/machine-id:/etc/machine-id:ro'
		-v "${HOME}/.keepassxc/config:/home/keepassxc/.config"
		-v "${HOME}/.keepassxc/cache:/home/keepassxc/.cache"
		-v "${HOME}/.keepassxc/fontconfig:/home/keepassxc/.fontconfig"
		-v "${HOME}/googledrive-home/backup/keepass:/home/keepassxc/databases"
		-v "${HOME}/.ssh:/home/keepassxc/.ssh:ro"
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
kvm(){
	local container_name="kvm"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/kvm"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v '/run/libvirt:/var/run/libvirt'
		--privileged
	)
	local application_args=(
		"$@"
	)

	# modprobe the module
	modprobe kvm

	docker_run_gui
}
libreoffice(){
	local container_name="libreoffice"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/libreoffice"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/googledrive-home:/root/googledrive-home"
		-v "${HOME}/Documents:/root/Documents"
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
alias lpass=lastpass
lastpass(){
	local container_name="lpass"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/lpass"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.lpass:/root/.lpass"
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
lynx(){
	local container_name="lynx"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/lynx"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
masscan(){
	local container_name="masscan"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/masscan"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
alias mc=midnight_commander
midnight_commander(){
	local container_name="mc"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/mc"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${PWD}:${PWD}"
		--workdir "${PWD}"
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
mpd(){
	local container_name="mpd"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/mpd"
	local network="trusted"
	local extra_networks=()
	local container_ip
	# adding cap sys_admin so I can use nfs mount
	# the container runs as a unpriviledged user mpd
	local extra_docker_args=(
		--cap-add SYS_ADMIN
		-e MPD_HOST=/var/lib/mpd/socket
		-v /etc/exports:/etc/exports:ro
		-v "${HOME}/.mpd:/var/lib/mpd"
		-v "${HOME}/.mpd.conf:/etc/mpd.conf"
	)
	local application_args=(
		"$@"
	)

	docker_run_daemon
}
mutt(){
	local container_name="mutt"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/mutt"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=()
	case "${1}" in
		riseup)
			container_name="mutt-${1}"
			extra_docker_args+=(
				-e GMAIL=${MAIL_RISEUP}
				-e GMAIL_NAME=${MAIL_RISEUP_NAME}
				-e GMAIL_PASS=${MAIL_RISEUP_PASS}
				-e GMAIL_FROM=${MAIL_RISEUP_FROM}
				-e GPG_ID
				-e IMAP_SERVER=mail.riseup.net
				-e SMTP_SERVER=mail.riseup.net
				-v "${HOME}/.gnupg:/home/user/.gnupg:ro"
			)
			shift
			;;
		*)
			extra_docker_args+=(
				-e GMAIL
				-e GMAIL_NAME
				-e GMAIL_PASS
				-e GMAIL_FROM
				-e GPG_ID
				-e IMAP_SERVER
				-e SMTP_SERVER
				-v "${HOME}/.gnupg:/home/user/.gnupg:ro"
			)
			;;
	esac
	local application_args=(
		"$@"
	)

	docker_run_tty
}
ncmpc(){
	relies_on mpd
	local container_name="ncmpc"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/ncmpc"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.mpd/socket:/var/run/mpd/socket"
		-e MPD_HOST=/var/run/mpd/socket
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
neoman(){
	local container_name="neoman"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/neoman"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--device /dev/bus/usb
		--device /dev/usb
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
nes(){
	local game=$1
	shift
	local container_name="nes"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/nes"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"/games/${game}.rom" "$@"
	)

	docker_run_gui
}
alias nc=netcat
netcat(){
	local container_name="netcat"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/netcat"
	local network="host"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
nginx(){
	local container_name="nginx-${1}"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/nginx"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.nginx:/etc/nginx:ro"
		-v "${2}:/usr/share/nginx/html:ro"
	)
	local application_args=(
	)

	docker_run_daemon
	hostess add ${1} ${container_ip}
}
nmap(){
	local container_name="nmap"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/nmap"
	local network="host"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
notify_osd(){
	local container_name="notify_osd"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/notify-osd"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"$@"
	)

	docker_run_daemon
}
alias notify-send=notify_send
notify_send(){
	relies_on notify_osd
	local args=${*:2}
	docker exec -i notify_osd notify-send "$1" "${args}"
}
now(){
	local container_name="now"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/now"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.now:/root/.now"
		-v "${PWD}:/usr/src/repo:ro"
		--workdir /usr/src/repo
		--log-driver none
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
opensnitch(){
	del_stopped opensnitchd
	del_stopped opensnitch

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		--network host \
		--cap-add NET_ADMIN \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /var/run/dbus:/var/run/dbus \
		-v /usr/share/dbus-1:/usr/share/dbus-1 \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-e DBUS_SESSION_BUS_ADDRESS \
		-e XAUTHORITY \
		-v "${HOME}/.Xauthority:${HOME}/.Xauthority" \
		-v /tmp:/tmp \
		--name opensnitchd \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/opensnitchd

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-v /usr/share/X11:/usr/share/X11:ro \
		-v /usr/share/dbus-1:/usr/share/dbus-1 \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /var/run/dbus:/var/run/dbus \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-e DBUS_SESSION_BUS_ADDRESS \
		-e XAUTHORITY \
		-v "${HOME}/.Xauthority:${HOME}/.Xauthority" \
		-e HOME \
		-e QT_DEVICE_PIXEL_RATIO \
		-e XDG_RUNTIME_DIR \
		-v /etc/passwd:/etc/passwd:ro \
		-v /etc/group:/etc/group:ro \
		-v /tmp:/tmp \
		-u "$(id -u)" -w "${HOME}" \
		--network host \
		--name opensnitch \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/opensnitch
}
osquery(){
	local container_name="osquery"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/osquery"
	local network="host"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v /var/run/docker.sock:/var/run/docker.sock
		-v /etc/os-release:/etc/os-release:ro
		--ipc host
		--pid host
		-e OSQUERY_ENROLL_SECRET
		--privileged
	)
	local application_args=(
		--verbose
		--enroll_secret_env=OSQUERY_ENROLL_SECRET
		--docker_socket=/var/run/docker.sock
		--host_identifier=hostname
		--tls_hostname="${OSQUERY_DOMAIN}"
		--enroll_tls_endpoint=/api/v1/osquery/enroll
		--config_plugin=tls
		--config_tls_endpoint=/api/v1/osquery/config
		--config_tls_refresh=10
		--disable_distributed=false
		--distributed_plugin=tls
		--distributed_interval=10
		--distributed_tls_max_attempts=3
		--distributed_tls_read_endpoint=/api/v1/osquery/distributed/read
		--distributed_tls_write_endpoint=/api/v1/osquery/distributed/write
		--logger_plugin=tls
		--logger_tls_endpoint=/api/v1/osquery/log
		--logger_tls_period=10
		"$@"
	)

	docker_run_daemon
}
pandoc(){
	local file=${*: -1}
	local lfile
	lfile=$(readlink -m "$(pwd)/${file}")
	local rfile
	rfile=$(readlink -m "/$(basename "${file}")")
	local args=${*:1:${#@}-1}

	local container_name="pandoc"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/pandoc"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${lfile}:${rfile}"
		--tmpfs /tmp
	)
	local application_args=(
		"${args}"
		"${rfile}"
	)

	docker_run_tty
}
pivman(){
	local container_name="pivman"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/pivman"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		--device /dev/bus/usb
		--device /dev/usb
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
pms(){
	relies_on mpd
	local container_name="pms"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/pms"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v "${HOME}/.mpd/socket:/var/run/mpd/socket" \
		-e MPD_HOST=/var/run/mpd/socket \
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
pond(){
	local container_name="pond"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/pond"
	local network="torproxy"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
privoxy(){
	del_stopped privoxy
	relies_on torproxy

	docker run -d \
		--restart always \
		--link torproxy:torproxy \
		-v /etc/localtime:/etc/localtime:ro \
		-p 8118:8118 \
		--name privoxy \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/privoxy

	hostess add privoxy "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' privoxy)"
}
pulseaudio(){
	local container_name="pulseaudio"
	local image_name="${JESSFRAZ_DOCKER_REPO_PREFIX}/pulseaudio"
	local network="trusted"
	local extra_networks=(
		untrusted
	)
	local container_ip
	local extra_docker_args=(
		--restart always
	)
	local application_args=(
		"$@"
	)

	docker_run_daemon

	hostess add ${container_name} "$(docker inspect --format \"{{.NetworkSettings.Networks.${network}.IPAddress}}\" ${container_name})"
	export PULSE_SERVER=${container_name}
}
rainbowstream(){
	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/.rainbow_oauth:/root/.rainbow_oauth" \
		-v "${HOME}/.rainbow_config.json:/root/.rainbow_config.json" \
		--name rainbowstream \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/rainbowstream
}
registrator(){
	del_stopped registrator

	docker run -d \
		--restart always \
		-v /var/run/docker.sock:/tmp/docker.sock \
		--network host \
		--name registrator \
		gliderlabs/registrator consul:
}
remmina(){
	del_stopped remmina

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-v "${HOME}/.remmina:/root/.remmina" \
		--name remmina \
		--network host \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/remmina
}
ricochet(){
	del_stopped ricochet

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-e QT_DEVICE_PIXEL_RATIO \
		--device /dev/dri \
		--name ricochet \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/ricochet
}
rstudio(){
	del_stopped rstudio

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/fastly-logs:/root/fastly-logs" \
		-v /dev/shm:/dev/shm \
		-e DISPLAY \
		-e QT_DEVICE_PIXEL_RATIO \
		--device /dev/dri \
		--name rstudio \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/rstudio
}
s3cmdocker(){
	del_stopped s3cmd

	docker run --rm -it \
		-e AWS_ACCESS_KEY="${DOCKER_AWS_ACCESS_KEY}" \
		-e AWS_SECRET_KEY="${DOCKER_AWS_ACCESS_SECRET}" \
		-v "$(pwd):/root/s3cmd-workspace" \
		--name s3cmd \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/s3cmd "$@"
}
scudcloud(){
	del_stopped scudcloud

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /var/run/dbus:/var/run/dbus \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-e TERM \
		-e DISPLAY \
		-e XAUTHORITY \
		-e QT_DEVICE_PIXEL_RATIO \
		-e DBUS_SESSION_BUS_ADDRESS \
		-e HOME \
		-v /etc/passwd:/etc/passwd:ro \
		-v /etc/group:/etc/group:ro \
		-u "$(whoami)" -w "${HOME}" \
		-v "${HOME}/.Xauthority:${HOME}/.Xauthority" \
		-v "${HOME}/.scudcloud:${HOME}/.config/scudcloud" \
		--device /dev/snd \
		--name scudcloud \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/scudcloud

	# exit current shell
	# exit 0
}
shorewall(){
	del_stopped shorewall

	docker run --rm -it \
		--network host \
		--cap-add NET_ADMIN \
		--privileged \
		--name shorewall \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/shorewall "$@"
}
skype(){
	del_stopped skype
	relies_on pulseaudio

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		--group-add video \
		--group-add audio \
		--network trusted \
		-e PULSE_SERVER=pulseaudio \
		--security-opt seccomp:unconfined \
		--name skype \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/skype
}
slack(){
	del_stopped slack

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		--group-add video \
		--group-add audio \
		--network trusted \
		-e PULSE_SERVER=pulseaudio \
		-v "${HOME}/.slack:/root/.config/Slack" \
		--ipc="host" \
		--name slack \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/slack "$@"
}
spotify(){
	del_stopped spotify
	relies_on pulseaudio

	docker run --rm -d \
		--network trusted \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--group-add video \
		--group-add audio \
		-e PULSE_SERVER=pulseaudio \
		-v ${HOME}/.config/spotify:/home/spotify/.config/spotify \
		-v ${HOME}/.cache/spotify:/home/spotify/spotify \
		--name spotify \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/spotify
}
ssh2john(){
	local file
	file=$(realpath "$1")

	docker run --rm -it \
		-v "${file}:/root/$(basename "${file}")" \
		--entrypoint ssh2john \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/john "$@"
}
sshb0t(){
	del_stopped sshb0t

	if [[ ! -d "${HOME}/.ssh" ]]; then
		mkdir -p "${HOME}/.ssh"
	fi

	if [[ ! -f "${HOME}/.ssh/authorized_keys" ]]; then
		touch "${HOME}/.ssh/authorized_keys"
	fi

	GITHUB_USER=${GITHUB_USER:=rjszynal}

	docker run --rm -it \
		--name sshb0t \
		-v "${HOME}/.ssh/authorized_keys:/root/.ssh/authorized_keys" \
		r.j3ss.co/sshb0t \
		--user "${GITHUB_USER}" --keyfile /root/.ssh/authorized_keys --once
}
steam(){
	del_stopped steam
	relies_on pulseaudio

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /var/run/dbus:/var/run/dbus \
		-v "${HOME}/.steam:/home/steam" \
		-e DISPLAY \
		--network trusted \
		-e PULSE_SERVER=pulseaudio \
		--device /dev/dri \
		--name steam \
		tianon/steam
}
t(){
	docker run -t --rm \
		-v "${HOME}/.trc:/root/.trc" \
		--log-driver none \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/t "$@"
}
tarsnap(){
	docker run --rm -it \
		-v "${HOME}/.tarsnaprc:/root/.tarsnaprc" \
		-v "${HOME}/.tarsnap:/root/.tarsnap" \
		-v "${HOME}:/root/workdir" \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/tarsnap "$@"
}
telnet(){
	docker run --rm -it \
		--log-driver none \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/telnet "$@"
}
termboy(){
	del_stopped termboy
	local game=$1

	docker run --rm -it \
		--device /dev/snd \
		--name termboy \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/nes "/games/${game}.rom"
}
terraform(){
	docker run --rm -it \
		-v "${HOME}:${HOME}:ro" \
		-v "$(pwd):/usr/src/repo" \
		-v /tmp:/tmp \
		--workdir /usr/src/repo \
		--log-driver none \
		-e GOOGLE_APPLICATION_CREDENTIALS \
		-e SSH_AUTH_SOCK \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/terraform "$@"
}
tor(){
	del_stopped tor

	docker run --rm -d \
		--network host \
		--name tor \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/tor

	# set up the redirect iptables rules
	sudo setup-tor-iptables

	# validate we are running through tor
	browser-exec "https://check.torproject.org/"
}
torbrowser(){
	del_stopped torbrowser

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--name torbrowser \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/tor-browser

	# exit current shell
	# exit 0
}
tormessenger(){
	del_stopped tormessenger

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--name tormessenger \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/tor-messenger

	# exit current shell
	# exit 0
}
torproxy(){
	del_stopped torproxy

	docker run -d \
		--restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		--name torproxy \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/tor-proxy

	hostess add torproxy "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' torproxy)"
}
traceroute(){
	docker run --rm -it \
		--network host \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/traceroute "$@"
}
transmission(){
	del_stopped transmission

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/Torrents:/transmission/download" \
		-v "${HOME}/.transmission:/transmission/config" \
		-p 9091:9091 \
		-p 51413:51413 \
		-p 51413:51413/udp \
		--name transmission \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/transmission


	hostess add transmission "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' transmission)"
	browser-exec "http://transmission:9091"
}
travis(){
	docker run --rm -it \
		-v "${HOME}/.travis:/root/.travis" \
		-v "$(pwd):/usr/src/repo:ro" \
		--workdir /usr/src/repo \
		--log-driver none \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/travis "$@"
}
virsh(){
	relies_on kvm

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v /run/libvirt:/var/run/libvirt \
		--log-driver none \
		--network container:kvm \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/libvirt-client "$@"
}
virt_viewer(){
	relies_on kvm

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-v /run/libvirt:/var/run/libvirt \
		-e PULSE_SERVER=pulseaudio \
		--group-add audio \
		--log-driver none \
		--network container:kvm \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/virt-viewer "$@"
}
alias virt-viewer="virt_viewer"
visualstudio(){
	del_stopped visualstudio

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		--device /dev/dri \
		--name visualstudio \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/vscode
}
#alias vscode="visualstudio"
vlc(){
	del_stopped vlc
	relies_on pulseaudio

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-e QT_DEVICE_PIXEL_RATIO \
		--group-add video \
		--group-add audio \
		--network trusted \
		-e PULSE_SERVER=pulseaudio \
		-v "${HOME}/Torrents:/home/vlc/Torrents" \
		-v "${HOME}/Videos:/home/vlc/Videos" \
		--device /dev/dri \
		--name vlc \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/vlc
}
watchman(){
	del_stopped watchman

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/Downloads:/root/Downloads" \
		--name watchman \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/watchman --foreground
}
weeslack(){
	del_stopped weeslack

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/.weechat:/home/user/.weechat" \
		--name weeslack \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/wee-slack
}
wg(){
	docker run -i --rm \
		--log-driver none \
		-v /tmp:/tmp \
		--cap-add NET_ADMIN \
		--network host \
		--name wg \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/wg "$@"
}
wireshark(){
	del_stopped wireshark

	docker run --rm -d \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY \
		--cap-add NET_RAW \
		--cap-add NET_ADMIN \
		--network host \
		--name wireshark \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/wireshark
}
wrk(){
	docker run --rm -it \
		--log-driver none \
		--name wrk \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/wrk "$@"
}
ykman(){
	del_stopped ykpersonalize

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/usb \
		--device /dev/bus/usb \
		--name ykman \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/ykman bash
}
ykpersonalize(){
	del_stopped ykpersonalize

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/usb \
		--device /dev/bus/usb \
		--name ykpersonalize \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/ykpersonalize bash
}
yubico_piv_tool(){
	del_stopped yubico-piv-tool

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/usb \
		--device /dev/bus/usb \
		--name yubico-piv-tool \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/yubico-piv-tool bash
}
alias yubico-piv-tool="yubico_piv_tool"

## Robert's extras
chrome-secure(){
	del_stopped chrome-secure
	del_stopped chrome-vpn

	docker run --rm -d \
		--cap-add=NET_ADMIN \
		--device=/dev/net/tun \
		--dns 209.222.18.222 --dns 209.222.18.218 \
		-e REGION=Switzerland \
		-e "USERNAME=$(head -n 1 ${HOME}/pia/login)" \
		-e "PASSWORD=$(tail -n 1 ${HOME}/pia/login)" \
		--name chrome-vpn \
		colinhebert/pia-openvpn

	if [ ! -f ${HOME}/seccomp/chrome.json ]; then
		mkdir -p ${HOME}/seccomp
		wget https://raw.githubusercontent.com/jfrazelle/dotfiles/master/etc/docker/seccomp/chrome.json -O ${HOME}/seccomp/chrome.json
	fi

	SESSIONXAUTH=${XAUTHORITY:-${HOME}/.Xauthority}
	DOCKER_XAUTH=${SESSIONXAUTH}.docker
	cp --preserve=all ${SESSIONXAUTH} ${DOCKER_XAUTH}
	echo "ffff 0000  $(xauth nlist ${DISPLAY} | cut -d\  -f4-)" | xauth -f ${DOCKER_XAUTH} nmerge -

	xhost +"local:docker@"

	docker run --rm -i \
		--network container:chrome-vpn \
		--cpuset-cpus 0 \
		--memory 1gb \
		-e DISPLAY \
		-v ${DOCKER_XAUTH}:${DOCKER_XAUTH}:ro \
		-e XAUTHORITY=${DOCKER_XAUTH} \
		-v ${HOME}/Downloads:/home/chrome/Downloads \
		--security-opt seccomp:${HOME}/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--shm-size=2g \
		--name chrome-secure \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/chrome \
			-new-instance \
			--incognito \
			--user-data-dir=/data

	xhost -"local:docker@"

	docker rm -fv chrome-vpn
}
chromium(){
	# relies_on pulseaudio
	local run_type=
	if [[ "$1" == "secure" ]] || [[ "$1" == "tor" ]]; then
		run_type="$1"
		shift
	fi

	# add flags for proxy if passed
	local proxy=
	local map
	local extra_chromium_args=( $@ )
	local extra_docker_args=()
	local name_suffix=
	local args_hash=$(sha1sum <<<"${*}" | cut -c1-40)
	local network="trusted"
	local display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
	local audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
	local extra_networks=()

	case "${run_type}" in
		secure)
			relies_on pia-vpn
			name_suffix="-secure"
			network="container:pia-vpn"
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)
			audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)

			extra_docker_args+=(
				--tmpfs "/home/chromium/.cache"
				--tmpfs "/home/chromium/.config"
				--tmpfs "/home/chromium/.pki"
			)
			extra_chromium_args+=(
				--incognito
				https://www.privateinternetaccess.com/
			)
			;;
		tor)
			relies_on torproxy
			name_suffix="-tor"
			network="untrusted"
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})
			audio_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})

			extra_docker_args+=(
				--tmpfs "/home/chromium/.cache"
				--tmpfs "/home/chromium/.config"
				--tmpfs "/home/chromium/.pki"
			)
			extra_chromium_args+=(
				--incognito
				--proxy-server="socks5://torproxy:9050"
				--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE torproxy"
				https://check.torproject.org/api/ip
			)
			;;
		*)
			relies_on_networks ${network}
			extra_docker_args+=(
				-u $(id -u):$(id -g) \
				-v ${HOME}/.chromium/cache:/home/chromium/.cache/chromium
				-v ${HOME}/.chromium/config:/home/chromium/.config/chromium
				-v ${HOME}/.chromium/pki:/home/chromium/.pki
				-v ${HOME}/Downloads:/home/chromium/Downloads
				-v ${HOME}/Pictures:/home/chromium/Pictures
				-v ${HOME}/Torrents:/home/chromium/Torrents
			)
			extra_chromium_args+=(
			)
			;;
	esac

	if [ ! -f ${HOME}/seccomp/chrome.json ]; then
		mkdir -p ${HOME}/seccomp
		wget https://raw.githubusercontent.com/jfrazelle/dotfiles/master/etc/docker/seccomp/chrome.json -O ${HOME}/seccomp/chrome.json
	fi

	del_stopped chromium${name_suffix}-${args_hash}

	docker run --rm -d \
		--network ${network} \
		--memory 2gb \
		--shm-size=2g \
		-v "/etc/localtime:/etc/localtime:ro" \
		-e DISPLAY="${display_ip}${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/dri \
		-e PULSE_SERVER="${audio_ip}" \
		-v "${HOME}/Downloads:/home/chromium/Downloads" \
		--security-opt seccomp:${HOME}/seccomp/chrome.json \
		${extra_docker_args[@]} \
		--name chromium${name_suffix}-${args_hash} \
		${JESSFRAZ_DOCKER_REPO_PREFIX}/chromium \
			-new-instance \
			--user-data-dir=/home/chromium/.config \
			${extra_chromium_args[@]}
}
dive(){
	local container_name="dive"
	local image_name="wagoodman/dive"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v /var/run/docker.sock:/var/run/docker.sock
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
hostess(){
	local container_name="hostess"
	local image_name="ondrejmo/hostess"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v /etc/hosts:/tmp/hosts:rw
		-e HOSTESS_PATH=/tmp/hosts
	)
	local application_args=(
		"$@"
	)

	docker_run_tty
}
keepass2(){
	del_stopped keepass2

	local display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' trusted)

	docker run --rm -d \
		--network trusted \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY="${display_ip}${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-v ${HOME}/.keepass2/plugins:/usr/lib/keepass2/Plugins \
		-v ${HOME}/.keepass2/home:/home/keepass2 \
		-v ${HOME}/googledrive-home/backup/keepass:/home/keepass2/databases \
		-v ${HOME}/.ssh:/home/keepass2/.ssh \
		--name keepass2 \
		${MY_DOCKER_REPO_PREFIX}/keepass2
}
pia-vpn(){
	local region
	local name_prefix=
	local network="untrusted"
	local extra_networks=()

	case "${1}" in
		host)
			name_prefix="host-"
			network="host"
			region="${2:-Switzerland}"
			;;
		*)
			relies_on_networks untrusted
			region="${1:-Switzerland}"
			;;
	esac

	del_stopped ${name_prefix}pia-vpn

	docker run --rm -d \
		--network ${network} \
		--cap-add=NET_ADMIN \
		--device=/dev/net/tun \
		--dns 209.222.18.222 --dns 209.222.18.218 \
		-e REGION="${region}" \
		-e USERNAME="$(head -n 1 ${HOME}/pia/login)" \
		-e PASSWORD="$(tail -n 1 ${HOME}/pia/login)" \
		--name ${name_prefix}pia-vpn \
		colinhebert/pia-openvpn
}
alias signal=signal-messenger
signal-messenger(){
	local container_name="signal-messenger"
	local image_name="${MY_DOCKER_REPO_PREFIX}/signal-messenger"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v ${HOME}/.signal/config:/home/signal/.config
		-v ${HOME}/.signal/cache:/home/signal/.cache
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
alias signal-beta=signal-messenger-beta
signal-messenger-beta(){
	local container_name="signal-messenger-beta"
	local image_name="${MY_DOCKER_REPO_PREFIX}/signal-messenger:beta"
	local network="trusted"
	local extra_networks=()
	local container_ip
	local extra_docker_args=(
		-v ${HOME}/.signal/config:/home/signal/.config
		-v ${HOME}/.signal/cache:/home/signal/.cache
	)
	local application_args=(
		"$@"
	)

	docker_run_gui
}
vivaldi(){
	relies_on pulseaudio
	local run_type=
	if [[ "$1" == "secure" ]]; then
		run_type="$1"
		shift
	fi

	local extra_vivaldi_args=( ${@} )
	local extra_docker_args=()
	local name_suffix=
	local args_hash=$(sha1sum <<<"${*}" | cut -c1-40)
	local display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' ${network})

	local network="trusted"
	local extra_networks=()
	case "${run_type}" in
		secure)
			relies_on pia-vpn
			name_suffix="-secure"
			network="container:pia-vpn"
			display_ip=$(docker network inspect --format='{{range .IPAM.Config}}{{.Gateway}}{{end}}' untrusted)

			extra_docker_args+=(
				--tmpfs "/home/vivaldi/.cache"
				--tmpfs "/home/vivaldi/.config"
				--tmpfs "/home/vivaldi/.pki"
			)
			extra_vivaldi_args+=(
				--incognito
				https://www.privateinternetaccess.com/
			)
			;;
		*)
			relies_on_networks ${network}
			extra_docker_args+=(
				-v ${HOME}/.vivaldi/cache:/home/vivaldi/.cache
				-v ${HOME}/.vivaldi/config:/home/vivaldi/.config
				-v ${HOME}/.vivaldi/pki:/home/vivaldi/.pki
				-v ${HOME}/Downloads:/home/vivaldi/Downloads
				-v ${HOME}/Pictures:/home/vivaldi/Pictures
				-v ${HOME}/Torrents:/home/vivaldi/Torrents
			)
			extra_vivaldi_args+=(
				-new-window
			)
			;;
	esac

	del_stopped vivaldi${name_suffix}-${args_hash}
	relies_on pulseaudio

	if [ ! -f ${HOME}/seccomp/chrome.json ]; then
		mkdir -p ${HOME}/seccomp
		wget https://raw.githubusercontent.com/jfrazelle/dotfiles/master/etc/docker/seccomp/chrome.json -O ${HOME}/seccomp/chrome.json
	fi

	docker run --rm -d \
		--network ${network} \
		--memory 4gb \
		--shm-size=2g \
		-h "$(hostname)" \
		-v /etc/localtime:/etc/localtime:ro \
		-e DISPLAY="${display_ip}${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-e PULSE_SERVER="pulseaudio" \
		--security-opt seccomp:${HOME}/seccomp/chrome.json \
		${extra_docker_args[@]} \
		--name vivaldi${name_suffix}-${args_hash} \
		${MY_DOCKER_REPO_PREFIX}/vivaldi \
			${extra_vivaldi_args[@]}
}
