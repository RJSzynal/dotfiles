#!/bin/bash

# Modified to use Cloudflare instead by RJSzynal
# GoDaddy.sh v1.3 by Nazar78 @ TeaNazaR.com
###########################################
# Simple DDNS script to update Cloudflare's DNS. Just schedule every 5mins in crontab.
# With options to run scripts/programs/commands on update failure/success.
#
# Requirements:
# - curl CLI - On Debian, apt-get install curl
#
# History:
# v1.0 - 20160513 - 1st release.
# v1.1 - 20170130 - Improved compatibility.
# v1.2 - 20180416 - GoDaddy API changes - thanks Timson from Russia for notifying.
# v1.3 - 20180419 - GoDaddy API changes - thanks Rene from Mexico for notifying.
# v2.0 - 20241202 - Re-write to use Cloudflare - RJSzynal
#
# PS: Feel free to distribute but kindly retain the credits (-:
###########################################

if [ $# -lt 2 ] || [ $# -gt 5 ]
then
    echo "Usage: $0 credentials domain [sub-domain] [ttl] [record_type]"
    echo "  credentials: Cloudflare API token with DNS:Edit permmission or"
    echo "               location of file containing that value on the first line"
    echo "  domain: The domain you're setting. e.g. mydomain.com"
    echo "  sub-domain: Record name, as seen in the DNS setup page. Default: @ (apex domain)"
    echo "  ttl: Time To Live in seconds. Default: 300 (5 minutes)"
    echo "  record_type: Record type, as seen in the DNS setup page. Default: A"
    exit 1
fi

## Set and validate the variables
# Get the API token from https://dash.cloudflare.com/profile/api-tokens.
# Ensure it has "Zone:DNS:Edit" and "Zone:Zone:Read" permissions.
if [ -z "${1}" ]
then
    echo "Error: Requires API token value. Can be a file location containing the value."
    exit 1
else
    if [ -f "${1}" ]
    then
        Token=$(head -n 1 ${1})
    else
        Token=${1}
    fi
fi
if [ -z "${Token}" ] # Check this again in case the file had a blank line
then
    echo "Error: Requires API token value. Can be a file location containing the value."
    exit 1
fi

# Domain to update.
if [ -z "${2}" ]
then
    echo "Error: Requires 'Domain' value."
    exit 1
else
    Domain=${2}
fi

# Advanced settings - change only if you know what you're doing :-)
# Record name, as seen in the DNS setup page, default @.
Name=${3-@}
[ -z "${Name}" ] && Name=@ # To catch any bad value passed in as an argument

# Time To Live in seconds, minimum 60 (1min), default 300 (5mins).
# If your public IP regularly changes, set it to 60 (1min).
TTL=${4-300}
[ -z "${TTL}" ] && TTL=300
[ "${TTL}" -lt 60 ] && TTL=60 # 60 is the minimum

# Record type, as seen in the DNS setup page, default A.
Type=${5-A}
[ -z "${Type}" ] && Type=A

# Writable path to last known Public IP record cached. Best to place in tmpfs.
CacheFilename=${Domain}_${Type}_${Name}
# This cleans up any illegal characters e.g. When setting the * record
CachedIPFile=/tmp/${CacheFilename//[*\/]/_}
echo -n>>${CachedIPFile} 2>/dev/null
if [ $? -ne 0 ]
then
    echo "Error: Can't write to ${CachedIPFile}."
    exit 1
fi

# External URL to check for current Public IP, must contain only a single plain text IP.
# Default http://api.ipify.org.
CheckURL=http://api.ipify.org

# Optional scripts/programs/commands to execute on successful update. Leave blank to disable.
# This variable will be evaluated at runtime but will not be parsed for errors nor execution guaranteed.
# Take note of the single quotes. If it's a script, ensure it's executable i.e. chmod 755 ./script.
# Example: SuccessExec='/bin/echo "$(date): My public IP changed to ${PublicIP}!">>/var/log/GoDaddy.sh.log'
SuccessExec=''

# Optional scripts/programs/commands to execute on update failure. Leave blank to disable.
# This variable will be evaluated at runtime but will not be parsed for errors nor execution guaranteed.
# Take note of the single quotes. If it's a script, ensure it's executable i.e. chmod 755 ./script.
# Example: FailedExec='/some/path/something-went-wrong.sh ${Update} && /some/path/email-script.sh ${PublicIP}'
FailedExec='/bin/echo "Fail!\nDomain: ${Domain}\nRecord: ${Name}\nType: ${Type}\nIP: ${PublicIP}\nERROR:${ErrorMsg}" | mail -s "DNS update failed" rjszynal@gmail.com'
# End settings

# Find the locally installed curl to use
Curl=$(/usr/bin/which curl 2>/dev/null)
if [ "${Curl}" = "" ]
then
    echo "Error: Unable to find 'curl CLI'."
    exit 1
fi


## Get the current public IP
echo -n "Checking current 'Public IP' from '${CheckURL}'..."
# Get current public IP
PublicIP=$(${Curl} -kLs ${CheckURL})
if [ $? -eq 0 ] && [[ "${PublicIP}" =~ [0-9]{1,3}\.[0-9]{1,3} ]]
then
    echo "${PublicIP}"
else
    ErrorMsg="Failed to check current public IP.\nResponse: ${PublicIP}"
    printf "${ErrorMsg}"
    eval ${FailedExec}
    exit 1
fi


## Compare the current public IP to the cached IP from the last run
if [ "$(cat ${CachedIPFile} 2>/dev/null)" = "${PublicIP}" ]
then
    echo "Current 'Public IP' matches 'Cached IP' recorded. No update required!"
    exit 0
fi


## Get the currently set IP from the Cloudflare record
echo -n "Checking '${Domain}' IP records from 'Cloudflare'..."

response=$(${Curl} -Ls \
    -X GET \
    -H "Authorization: Bearer ${Token}" \
    -H "Content-type: application/json" \
    https://api.cloudflare.com/client/v4/zones)
if [ "$(echo ${response} | jq '.success' -r)" != "true" ]; then
    ErrorMsg="Error getting Zone ID\n${response}"
    printf "Failed!\n${ErrorMsg}"
    eval ${failedExec}
    exit 1
fi
ZoneID=$(echo ${response} | jq ".result[] | select(.name==\"${Domain}\") | .id" -r)
RecordName="${Name}.${Domain}"
if [ "${Name}" = "@" ]; then 
    RecordName="${Domain}"
fi
response=$(${Curl} -Ls \
    -X GET \
    -H "Authorization: Bearer ${Token}" \
    -H "Content-type: application/json" \
    https://api.cloudflare.com/client/v4/zones/${ZoneID}/dns_records)
if [ "$(echo ${response} | jq '.success' -r)" != "true" ]; then
    ErrorMsg="Error getting Record ID\n${response}"
    printf "Failed!\n${ErrorMsg}"
    eval ${failedExec}
    exit 1
fi
RecordID=$(echo ${response} | jq ".result[] | select(.type==\"${Type}\" and .name==\"${RecordName}\") | .id" -r)
if [ -z "${RecordID}" ]; then
    ErrorMsg="Error getting Record ID. Record doesn't exist.\n${response}"
    printf "Failed!\n${ErrorMsg}"
    eval ${failedExec}
    exit 1
fi
response=$(${Curl} -Ls \
    -X GET \
    -H "Authorization: Bearer ${Token}" \
    -H "Content-type: application/json" \
    https://api.cloudflare.com/client/v4/zones/${ZoneID}/dns_records/${RecordID})
if [ "$(echo ${response} | jq '.success' -r)" != "true" ]; then
    ErrorMsg="Error getting current IP\n${response}"
    printf "Failed!\n${ErrorMsg}"
    eval ${failedExec}
    exit 1
fi
CurrentCFIP=$(echo ${response} | jq ".result.content" -r )


## Compare the current public IP to the Cloudflare record
if [ $? -eq 0 ] && [ "${CurrentCFIP}" = "${PublicIP}" ]
then
    echo -n "${CurrentCFIP}" > ${CachedIPFile} # Record the current public IP in the cache file
    echo "unchanged"
    echo "Current 'Public IP' matches 'Cloudflare' records. No update required."
    exit 0
fi


## Update the Cloudflare record with the current IP
echo "changed"
echo -n "Updating '${Domain}'..."

response=$(${Curl} -kLs \
    -X PATCH \
    -H "Authorization: Bearer ${Token}" \
    -H "Content-type: application/json" \
    https://api.cloudflare.com/client/v4/zones/${ZoneID}/dns_records/${RecordID} \
    -d "{\"comment\": \"Managed by ${0}\",\"name\": \"${RecordName}\",\"ttl\": ${TTL},\"content\": \"${PublicIP}\",\"type\": \"${Type}\"}")
if [ "$(echo ${response} | jq '.success' -r)" != "true" ]; then
    ErrorMsg="Error setting new IP\n${response}"
    printf "Failed!\n${ErrorMsg}"
    eval ${failedExec}
    exit 1
fi
Update=$(echo ${response} | jq ".result" -r )

echo -n "${PublicIP}" > ${CachedIPFile} # Record the current public IP in the cache file
echo "Success"
eval ${SuccessExec}
exit 0
